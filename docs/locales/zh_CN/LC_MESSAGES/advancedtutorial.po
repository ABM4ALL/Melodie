# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, open excel_source
# This file is distributed under the same license as the Melodie package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Melodie \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-17 11:16+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/advancedtutorial/arch.md:1
msgid "Melodie Architecture"
msgstr ""

#: ../../source/advancedtutorial/arch.md:3
msgid "[TOC]"
msgstr ""

#: ../../source/advancedtutorial/arch.md:33
msgid "Agent&AgentList"
msgstr ""

#: ../../source/advancedtutorial/arch.md:34
msgid ""
"Agent class in Melodie is the base agent class whose life cycle has "
"several functions."
msgstr ""

#: ../../source/advancedtutorial/arch.md:39
msgid "Agent.__init__ was defined by Melodie framework and called by AgentList."
msgstr ""

#: ../../source/advancedtutorial/arch.md:40
msgid ""
"Agent.setup() was defined by Melodie and overriden by user to add "
"properties."
msgstr ""

#: ../../source/advancedtutorial/arch.md:42
msgid ""
"AgentList stores all agent instances. The developer need to pass Agent "
"class (or subclass) and agent number into it."
msgstr ""

#: ../../source/advancedtutorial/arch.md:49
msgid "__init__ was defined by Melodie, called by Model"
msgstr ""

#: ../../source/advancedtutorial/arch.md:50
msgid "setup_agents was defined by Melodie, called in AgentList.__init__."
msgstr ""

#: ../../source/advancedtutorial/arch.md:52
msgid "Scenario&ScenarioManager"
msgstr ""

#: ../../source/advancedtutorial/arch.md:54
msgid "Model"
msgstr ""

#: ../../source/advancedtutorial/arch.md:56
msgid "TableGenerator"
msgstr ""

#: ../../source/advancedtutorial/arch.md:57
msgid "DataCollector"
msgstr ""

#: ../../source/advancedtutorial/arch.md:58
msgid "Environment"
msgstr ""

#: ../../source/advancedtutorial/arch.md:61
msgid "Database"
msgstr ""

#: ../../source/advancedtutorial/arch.md:62
msgid "Melodie stores model data in sqlite database."
msgstr ""

#: ../../source/advancedtutorial/arch.md:69
msgid "Config"
msgstr ""

#: ../../source/advancedtutorial/arch.md:71
msgid "StartUp"
msgstr ""

#: ../../source/advancedtutorial/boost.md:1
msgid "Boost Python with vectorization"
msgstr ""

#: ../../source/advancedtutorial/boost.md:3
msgid ""
"It is a well-known issue that pythoner always get speed penalties when "
"enjoying speedy development. Melodie, based on python, was no exception."
msgstr ""

#: ../../source/advancedtutorial/boost.md:6
msgid "Introduction"
msgstr ""

#: ../../source/advancedtutorial/boost.md:8
msgid "Why Python Slow"
msgstr ""

#: ../../source/advancedtutorial/boost.md:10
msgid ""
"Interpretation. Comparing to C/C++, C#, Golang, Python is slower than "
"them because it runs with a interpreter, not Native Code."
msgstr ""

#: ../../source/advancedtutorial/boost.md:13
msgid ""
"Lack of JIT. Comparing to Javascript, another famous interpretative "
"language, the interpreter of Python lacks Just-In-Time compilation."
msgstr ""

#: ../../source/advancedtutorial/boost.md:16
msgid ""
"Dynamic Type. Comparing to Java, Python does not have a static type "
"system for checking and optimization."
msgstr ""

#: ../../source/advancedtutorial/boost.md:18
msgid "Common ways to improve performance"
msgstr ""

#: ../../source/advancedtutorial/boost.md:20
msgid "Cython."
msgstr ""

#: ../../source/advancedtutorial/boost.md:21
msgid ""
"As python has great affinity for C binding, cython was introduced for "
"writing python-like code to generate C code. Well-compiled cython code "
"runs as fast as C."
msgstr ""

#: ../../source/advancedtutorial/boost.md:23
msgid ""
"However, writting cython code and bind python objects to it may not be a "
"easy task."
msgstr ""

#: ../../source/advancedtutorial/boost.md:24
msgid "Numba."
msgstr ""

#: ../../source/advancedtutorial/boost.md:25
msgid ""
"Numba was a python JIT compiler based on LLVM, compiling python code to "
"native code at runtime. If JIT warms up, it will run as fast as C."
msgstr ""

#: ../../source/advancedtutorial/boost.md:27
msgid ""
"Numba needs some time to warm up. If the script is executed only once, "
"the just-in-time compilation can be useless."
msgstr ""

#: ../../source/advancedtutorial/boost.md:29
msgid "Numba does not support Object-Oriented Programming in python."
msgstr ""

#: ../../source/advancedtutorial/boost.md:30
msgid "PyPy"
msgstr ""

#: ../../source/advancedtutorial/boost.md:31
msgid ""
"PyPy is a brand-new interpreter with a Just-In-Time compiler. Developers "
"need not change any code, just download this interpreter and then enjoy "
"3~10 times speed up."
msgstr ""

#: ../../source/advancedtutorial/boost.md:33
msgid ""
"However, PyPy was not good at calling python-c interface. Manipulating "
"numpy arrays or pandas dataframe could be annoying slow——even many times "
"slower than CPython!"
msgstr ""

#: ../../source/advancedtutorial/boost.md:36
msgid "Optimizations for ABM Frameworks"
msgstr ""

#: ../../source/advancedtutorial/boost.md:38
msgid ""
"For Agent-Based Modelling Frameworks, on the one hand, they are Object-"
"Oriented program, which makes it hard for adopting Cython or Numba for "
"speed up. But on the other hand, we must use numpy, pandas and many other"
" C-bound tools for data exploration, which are the weakness of PyPy "
"interpreter."
msgstr ""

#: ../../source/advancedtutorial/boost.md:42
msgid ""
"TO speed up, Mesa, another ABM framework, avoided using Python-C APIs(and"
" third-party packages such as numpy, pandas) to ensure PyPy could do its "
"best. But in contrary, Melodie decided to optimize the performance of "
"CPython interpreter as much as possible."
msgstr ""

#: ../../source/advancedtutorial/boost.md:46
msgid "Vectorization in Melodie"
msgstr ""

#: ../../source/advancedtutorial/boost.md:48
msgid "Principle"
msgstr ""

#: ../../source/advancedtutorial/boost.md:50
msgid ""
"Melodie uses cython to accelerate property access. At the cython layer, "
"Melodie will gather property of all agents, returning a numpy array."
msgstr ""

#: ../../source/advancedtutorial/boost.md:53
msgid ""
"Once we have got the array, we could use broadcast manipulations to speed"
" up. Furthermore, to gain a extreme speed increase, we could use numba in"
" a independent function."
msgstr ""

#: ../../source/advancedtutorial/boost.md:56
msgid ""
"Notice that when you changed item value in the array, the corresponding "
"property of the agent will not be changed. In order to gain better "
"performance, we should call broadcast methods to apply the change."
msgstr ""

#: ../../source/advancedtutorial/boost.md:81
msgid "A demo of Game of Life"
msgstr ""

#: ../../source/advancedtutorial/boost.md:83
msgid "Think of a \"Game of Life\". If you are not familiar with it, hit here"
msgstr ""

#: ../../source/advancedtutorial/boost.md:86
msgid "All cells are on a grid, the simple rules are as follows:"
msgstr ""

#: ../../source/advancedtutorial/boost.md:88
msgid ""
"If the cell is alive, then it stays alive if it has either 2 or 3 live "
"neighbors"
msgstr ""

#: ../../source/advancedtutorial/boost.md:89
msgid ""
"If the cell is dead, then it springs to life only in the case that it has"
" 3 live neighbors"
msgstr ""

#: ../../source/advancedtutorial/boost.md:95
msgid "(Not accomplished)"
msgstr ""

