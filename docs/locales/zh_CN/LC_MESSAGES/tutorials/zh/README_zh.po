# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, open excel_source
# This file is distributed under the same license as the Melodie package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Melodie \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-17 11:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/tutorials/zh/README_zh.md:1 0050c48d035e4853ad1ca3c383ef7fff
msgid "项目结构"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:3 7a394fca5075495781343be1bd216ea9
msgid "目前仅支持使用sqlite数据库进行数据的存储。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:5 f5c5383a212e40519259cb2180edfca7
msgid "在目前，sqlite文件的名称与项目名称相同。 启动时，需要通过Config对象来设置这些参数,如下述代码所示："
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:14 53ba17f5d7d049cbaab2f9c17290838a
msgid "Config的参数含义："
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:15 12eed37b85ff48be99837757affd8dd6
msgid "第一个参数，是项目的名称，只允许有效的变量名。 除了字母、数字、下划线之外，还可以使用汉字、日韩文字、阿拉伯文字等非Ascii字符。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:17 3c73e74f67d14c539ba447e6b70964f5
msgid "第二个参数是项目的根目录。默认情况下，数据库文件以及分析结果文件将输出到项目根目录/_database和根目录/_output下。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:18 1e5875f8cc4449afafb858158345019c
msgid "还有其他参数，可以指定数据库和结果文件的输出路径。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:20 d644f5435c014b56a2c65c734af59773
msgid "数据库与存储"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:21 b33090b53309498d84ab0e644a5e1c30
msgid "数据存储方面， 一共有4个数据表："
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:23 5721c5e8726949558f5cbf2f34bd3291
msgid "scenarios，存储生成的scenario"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:24 6ebf4f44e9ac41ffb25429e7641206b3
msgid "仿真最开始的阶段，被ScenarioManager生成后即写入数据库。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:25 822e1e74167b41d89d2f9ebe4ec3535b
msgid "agent_param，存储agent的参数"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:26 89c77258870b4d74a33e8c33ab9f1711
msgid "当刚刚进入一个Scenario时，被TableGenerator生成后即写入数据库"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:27 5d5df9a136624672b336ddc90841cbfd
msgid "env_result，存储环境的结果信息"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:28 e386cb5ca0c8478fb859b6025d68a4b2
msgid "每一个Scenario结束时，被写入数据库。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:29 20c33eae78b84f1096c3032513cacfd9
msgid "agent_result，存储agent的结果"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:30 bbaa55d857494b50aae2e576c788f55b
msgid "写入数据库的时间与env_result相同。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:32 42006a0559bf453bbe1399c1b3c95656
msgid ""
"可以使用dbbrowser打开数据库，或者用Melodie.db.create_conn()生成一个 "
"数据库管理的实例，调用其中的相应方法来查看数据。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:35 2b54bf6a2d0c4e0faf7109a22d9b13f0
msgid "例如要获取环境的数据："
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:40 dcdef2292e2842d1b5a251716b3b7761
msgid "返回结果："
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:58 1b2e2d3220b74ce8ae78105c0ec1a22c
msgid "其他可详见tests/test_db.py"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:60 b76334965241457b95a722e1c2f85cd4
msgid "另外，与Melodie配套的、基于Web的管理工具，将带有数据库的初步查看功能。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:62 52f7e459aed84caebce10677a8a8f0e5
msgid ""
"由于可能涉及到仿真过程中对数据库的异步读写，所以目前阶段，create_conn()每次都返回一个 "
"新的数据库连接。这可能会导致较大的读写开销。在未来将考虑进行优化。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:65 845a9094915f4b01b7c321a95827b5b1
msgid "Scenario的生成——ScenarioManager"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:66 584140ae58534deb92d5e90ba4e7bd10
msgid "Melodie仿真的项目，首先可以分为一系列的场景（Scenario）。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:68 c01a22ea26bb40e7ba9f4a3ed2966220
msgid "一系列场景由ScenarioManager的gen_scenario()方法生成。仿真过程中， 对于每一个场景，都会单独创建一个模型并运行仿真。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:71 2f04905d11e744de9766c7e8cd97aaab
msgid "场景的概念略微有一些复杂。因此对于入门级的项目应该省掉这个概念，用最简单的方式来入门。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:73 df789de7510a433695a93b8153d40b1f
msgid ""
"另外，不同场景之间的数据是独立的，因此用户必然会提出并行仿真不同Scenario的要求。 "
"为了解决这个问题，需要在向sqlite写入数据时进行一定的判断，如果写入失败，则进行等待。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:77 2f9a1ce4688d4fa595ebf39156b35227
msgid "Agent的参数生成——TableGenerator的使用"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:79 a8ec31a360f64c74a920c1d4341eb9a3
msgid "场景生成后，第一步任务就是要生成Agent的参数，也就是用TableGenerator."
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:81 83b2842cde6e453eb3801d3be9cd1f61
msgid ""
"TableGenerator的使用方法较为简单，只要重写其setup()函数即可。 "
"在以下代码中，假设Agent需要赋初始值的属性——也就是参数(parameter)——有productivity和 "
"account两个，那么就调用add_agent_param方法即可。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:97 211fd9c03d2743718d1e9c65e940f12a
msgid "add_agent_param方法有两个参数。第一个是属性名称，第二个是生成器。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:99 3a84bab406c244099c30208280d258ef
msgid "生成器是int/float/str型，或者是一个函数，没有参数，返回一个相应数据类型的数值。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:101 60690f3681de4f65bd5b34e6e768ea02
msgid ""
"当传入int/float/str型数时，所有Agent被设置的属性，都和传入的值一样。如第一行初始化 "
"productivity，所有的Agent的productivity都被设置为scenario.agent_productivity"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:104 c79ee6a0f8cd4e9aa428e40c12a73fd8
msgid "当传入函数时，属性将被设置为这个函数调用后的返回值。"
msgstr ""

#: ../../source/tutorials/zh/README_zh.md:106 59d7b693cb2e470482f9cc74a4828cfe
msgid "TableGenerator在生成参数之后，就会将参数存入数据库内。存入数据库之后， 它的任务就完成了。"
msgstr ""

