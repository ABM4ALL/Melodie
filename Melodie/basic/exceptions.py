from typing import TYPE_CHECKING, Any

if TYPE_CHECKING:
    from Melodie.agent import Agent


class MelodieException(Exception):
    def __init__(self, exc_id: int, text: str):
        text = f'{text} <Error ID {exc_id}>'
        super(MelodieException, self).__init__(text)
        self.id = exc_id


class MelodieExceptions:
    class State:
        ID = 1100

        @staticmethod
        def StateNotFoundError(state, all_states):
            return MelodieException(1101,
                                    f'State {repr(state)} is not defined. All states are: {all_states}')

        @staticmethod
        def CannotMoveToNewStateError(old_state, new_state, all_possible_new_states: set):
            if len(list(all_possible_new_states)) == 0:
                return MelodieException(1102,
                                        f'Current state is {repr(old_state)}, on which the status could only move to'
                                        f' itself. However the new state was {repr(new_state)}')
            else:
                return MelodieException(1102,
                                        f'Current state is {repr(old_state)}, on which the status could only move to'
                                        f' {all_possible_new_states}. However the new state was {repr(new_state)}')

        @staticmethod
        def NotAStateAttributeError(agent_cls, state_attr: str):
            return MelodieException(1103, f'Class {agent_cls} has not defined state attribute {state_attr}')

    class Scenario:
        ID = 1200

        @staticmethod
        def ScenarioIDDuplicatedError(scenario_id):
            return MelodieException(1201, f'Scenario id {scenario_id} was duplicated, which is not allowed.')

        @staticmethod
        def ScenarioIDTypeError(scenario_id):
            return MelodieException(1202,
                                    f'Scenario id {scenario_id} should be None, int or str. However its type was {type(scenario_id)}.')

        @staticmethod
        def ScenarioIDNotAllNoneError(scenario_id_nones: int, scenario_nums: int):
            return MelodieException(1203,
                                    f'{scenario_id_nones} scenario(s) has/have id None, However there are totally {scenario_nums} scenarios.\n'
                                    f'If you would like to use self-increment user ids, please make sure all scenarios has id of None!')

        @staticmethod
        def NoValidScenarioGenerated(scenarios):
            return MelodieException(1204,
                                    f'The scenario manager has not generated any valid scenarios. '
                                    f'The scenarios generated by gen_scenarios() was {scenarios},'
                                    f'please make sure gen_scenarios() returns a list of Scenario.')

        @staticmethod
        def ScenariosIsEmptyList():
            return MelodieException(1205,
                                    f'The scenario manager generated an empty scenario list. '
                                    f'Please make sure gen_scenarios() returns a list of Scenario.')

        @staticmethod
        def ScenarioIDNotOfSameTypeError(id1, id2_type):
            return MelodieException(1206,
                                    f'Scenario id should be of same type, however types {type(id1)} and {id2_type}'
                                    f' detected. ')

        @staticmethod
        def ScenarioListItemTypeError(item):
            return MelodieException(1207,
                                    f'Scenario list elements are not Scenario() but a {type(item)} object with value {item}')
